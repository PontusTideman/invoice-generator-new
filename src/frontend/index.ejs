<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="icon" type="image/x-icon" href="/favicon.ico">
    <title>Quote Generator</title>
    <!-- Add jsPDF library -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf-autotable/3.5.29/jspdf.plugin.autotable.min.js"></script>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 20px;
        }
        h1 {
            color: #333;
        }
        form {
            max-width: 600px;
            margin: 0 auto;
        }
        label {
            display: block;
            margin-top: 10px;
        }
        select {
            width: 80%;
            padding: 8px;
            margin-top: 5px;
            margin-bottom: 10px;
            border: 1px solid #ccc;
            border-radius: 4px;
        }

        input {
            width: 80%;
            padding: 8px;
            margin-top: 5px;
            margin-bottom: 10px;
            border: 1px solid #ccc;
            border-radius: 4px;
        }
        .item {
            width: 80%;
            border: 1px solid #ddd;
            padding: 10px;
            margin-bottom: 10px;
            border-radius: 4px;
            display: grid;
            gap: 10px;
        }
        .item-description {
            color: #666;
            margin: 5px 0;
        }
        .hidden {
            display: none;
        }
        .size-dropdown, .option-dropdown {
            transition: all 0.3s ease;
        }
        button {
            padding: 10px 20px;
            background-color: #28a745;
            color: white;
            border: none;
            border-radius: 4px;
            cursor: pointer;
        }
        button:hover {
            background-color: #218838;
        }
        button:disabled {
            background-color: #cccccc;
            cursor: not-allowed;
            opacity: 0.7;
        }
        .loader {
            border: 4px solid #f3f3f3;
            border-radius: 50%;
            border-top: 4px solid #28a745;
            width: 40px;
            height: 40px;
            animation: spin 1s linear infinite;
            margin: 20px auto;
        }
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
        .overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(255, 255, 255, 0.9);
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            z-index: 9999;
        }
        .overlay-text {
            margin-top: 20px;
            font-size: 18px;
            color: #28a745;
        }
        .description-container {
            margin: 5px 0;
        }
        .description-container label {
            font-weight: bold;
            margin-right: 5px;
        }
    </style>
</head>
<body>
    <img 
        id="companyLogo" 
        alt="Company Logo" 
        style="height: 150px;" 
        src="images/company_logo.png"/>
    <h1>Quote Generator</h1>
    <form id="invoiceForm">
        <label for="customerName">Customer Name:</label>
        <input type="text" id="customerName" name="customerName" required>

        <label for="address">Address:</label>
        <input type="text" id="address" name="address" required>

        <label for="emailAddress">Email Address:</label>
        <input type="email" id="emailAddress" name="emailAddress" required>

        <label for="phone">Phone:</label>
        <input type="text" id="phone" name="phone" required>

        <h3>Items:</h3>
        <div id="items">
            <div class="item">
                <label for="item0">Select an item:</label>
                <select id="item0" name="items[0][description]" class="item-dropdown"></select>
                <div id="description0" class="description-container">
                    <label>Description:</label>
                    <span class="item-description"></span>
                </div>
                <label for="size0" class="size-label hidden">Size:</label>
                <select id="size0" name="items[0][size]" class="size-dropdown hidden" disabled></select>
                <label for="option0" class="option-label hidden">Options:</label>
                <select id="option0" name="items[0][option]" class="option-dropdown hidden" disabled></select>
                <input type="number" name="items[0][quantity]" placeholder="Quantity" style="display: none;" inputmode="numeric" pattern="[0-9]*">
                
                <label id="price0" style="display: none;">Price: R0.00</label>
            </div>
        </div>

        <button type="button" id="addItemBtn" onclick="addItem()" disabled>Add Item</button>
        <button type="submit" id="generateInvoiceBtn" disabled>Generate Invoice</button>
    </form>

    <script>
        let dropdown;
        let itemCount = 1;
        let companyLogo = new Image();
        let logoLoaded = false;
        
        // Global variables to store logo colors - using brand colors common in South African businesses
        // This will be much more accurate than the extraction
        let logoPrimaryColor = [255, 99, 71]; // Darker red for table header
        let logoSecondaryColor = [245, 245, 245]; // Very light gray for alternating rows
        let footerColor = [211, 211, 211]; // Light grey for footer
        
        // Preload company logo for PDF - improved handling
        function preloadLogo() {
            const logoImg = document.getElementById('companyLogo');
            companyLogo = new Image();
            companyLogo.crossOrigin = "Anonymous"; // Handle cross-origin images if needed
            companyLogo.src = logoImg.src;
            companyLogo.onload = function() {
                console.log("Logo loaded successfully");
                logoLoaded = true;
                // No longer attempting to extract colors as it's not accurate
            };
            companyLogo.onerror = function() {
                console.error("Error loading logo");
                logoLoaded = false;
            };
        }

        // Call the preload function when the page loads
        window.addEventListener('DOMContentLoaded', function() {
            // First, ensure all DOM elements are loaded
            const dropdown = document.getElementById('item0');
            const descriptionContainer = document.getElementById('description0');
            
            if (!dropdown || !descriptionContainer) {
                console.error('Required DOM elements not found');
                return;
            }

            // Then initialize everything in the correct order
            preloadLogo();
            setupEventListeners();
            loadDropDown();
        });

        // Function to check if any item is selected and has quantity
        function checkItemSelection() {
            const dropdowns = document.querySelectorAll('.item-dropdown');
            const hasValidItem = Array.from(dropdowns).some(dropdown => {
                const itemContainer = dropdown.closest('.item');
                const quantityInput = itemContainer.querySelector('input[type="number"]');
                const selectedOption = dropdown.options[dropdown.selectedIndex];
                
                // Check if an item is selected and has a valid quantity
                return selectedOption && 
                       selectedOption.value && 
                       selectedOption.value !== '' && 
                       quantityInput && 
                       quantityInput.value && 
                       parseFloat(quantityInput.value) > 0;
            });
            
            // Enable/disable buttons based on selection
            document.getElementById('addItemBtn').disabled = !hasValidItem;
            document.getElementById('generateInvoiceBtn').disabled = !hasValidItem;
            
            // Log the state for debugging
            console.log('Has valid item:', hasValidItem);
            console.log('Add Item button disabled:', document.getElementById('addItemBtn').disabled);
            console.log('Generate Invoice button disabled:', document.getElementById('generateInvoiceBtn').disabled);
        }

        // Update event listeners
        function setupEventListeners() {
            document.addEventListener('change', function(e) {
                if (e.target.classList.contains('item-dropdown')) {
                    const itemIndex = e.target.id.replace('item', '');
                    const selectedOption = e.target.options[e.target.selectedIndex];
                    const priceLabel = document.getElementById(`price${itemIndex}`);
                    const quantityInput = e.target.parentElement.querySelector('input[type="number"]');
                    const descriptionContainer = document.getElementById(`description${itemIndex}`);
                    
                    if (selectedOption.value) {
                        // Set description first
                        if (descriptionContainer) {
                            const descriptionSpan = descriptionContainer.querySelector('.item-description');
                            if (descriptionSpan) {
                                descriptionSpan.textContent = selectedOption.dataset.description || '';
                                descriptionContainer.style.display = 'block';
                            }
                        }

                        // Then show price
                        if (priceLabel) {
                            const price = selectedOption.dataset.price;
                            priceLabel.textContent = `Price: R${price}`;
                            priceLabel.style.display = 'block';
                        }
                        
                        // Show size dropdown and its label
                        const sizeLabel = document.querySelector(`label[for="size${itemIndex}"]`);
                        const sizeDropdown = document.getElementById(`size${itemIndex}`);
                        if (sizeLabel && sizeDropdown) {
                            sizeLabel.classList.remove('hidden');
                            sizeDropdown.classList.remove('hidden');
                            sizeDropdown.disabled = false;

                            // Add size option
                            sizeDropdown.innerHTML = '';
                            const sizeOption = document.createElement('option');
                            sizeOption.value = selectedOption.dataset.size;
                            sizeOption.textContent = selectedOption.dataset.size;
                            sizeDropdown.appendChild(sizeOption);

                            // Trigger options dropdown since size is pre-selected
                            const optionLabel = document.querySelector(`label[for="option${itemIndex}"]`);
                            const optionDropdown = document.getElementById(`option${itemIndex}`);
                            const quantityInput = sizeDropdown.parentElement.querySelector('input[type="number"]');
                            
                            if (optionLabel && optionDropdown) {
                                const options = JSON.parse(selectedOption.dataset.options);
                                if (options && options.length > 0) {
                                    optionLabel.classList.remove('hidden');
                                    optionDropdown.classList.remove('hidden');
                                    optionDropdown.disabled = false;

                                    optionDropdown.innerHTML = '';
                                    const defaultOption = document.createElement('option');
                                    defaultOption.value = '';
                                    defaultOption.textContent = 'Select option';
                                    defaultOption.disabled = true;
                                    defaultOption.selected = true;
                                    optionDropdown.appendChild(defaultOption);

                                    options.forEach(option => {
                                        const optionElement = document.createElement('option');
                                        optionElement.value = option;
                                        optionElement.textContent = option;
                                        optionDropdown.appendChild(optionElement);
                                    });

                                    // Hide quantity input when showing options
                                    if (quantityInput) {
                                        quantityInput.style.display = 'none';
                                        quantityInput.removeAttribute('required');
                                        quantityInput.value = '';
                                    }
                                } else {
                                    optionLabel.classList.add('hidden');
                                    optionDropdown.classList.add('hidden');
                                    optionDropdown.disabled = true;
                                    // Show quantity input if no options
                                    if (quantityInput) {
                                        quantityInput.style.display = 'block';
                                        quantityInput.setAttribute('required', '');
                                    }
                                }
                            }
                        }
                    } else {
                        // Hide all controls when no item is selected
                        if (priceLabel) {
                            priceLabel.style.display = 'none';
                        }
                        if (quantityInput) {
                            quantityInput.style.display = 'none';
                            quantityInput.removeAttribute('required');
                            quantityInput.value = '';
                        }
                        
                        // Hide all dropdowns and labels
                        const sizeLabel = document.querySelector(`label[for="size${itemIndex}"]`);
                        const sizeDropdown = document.getElementById(`size${itemIndex}`);
                        const optionLabel = document.querySelector(`label[for="option${itemIndex}"]`);
                        const optionDropdown = document.getElementById(`option${itemIndex}`);
                        
                        if (sizeLabel && sizeDropdown) {
                            sizeLabel.classList.add('hidden');
                            sizeDropdown.classList.add('hidden');
                            sizeDropdown.disabled = true;
                        }
                        if (optionLabel && optionDropdown) {
                            optionLabel.classList.add('hidden');
                            optionDropdown.classList.add('hidden');
                            optionDropdown.disabled = true;
                        }

                        // Hide description container when no item is selected
                        if (descriptionContainer) {
                            descriptionContainer.style.display = 'none';
                        }
                    }
                    checkItemSelection();
                } else if (e.target.classList.contains('size-dropdown')) {
                    const itemIndex = e.target.id.replace('size', '');
                    const optionLabel = document.querySelector(`label[for="option${itemIndex}"]`);
                    const optionDropdown = document.getElementById(`option${itemIndex}`);
                    const quantityInput = e.target.parentElement.querySelector('input[type="number"]');
                    
                    console.log('Size dropdown changed for item:', itemIndex);
                    
                    if (optionLabel && optionDropdown) {
                        const selectedItem = document.getElementById(`item${itemIndex}`);
                        const selectedOption = selectedItem.options[selectedItem.selectedIndex];
                        
                        console.log('Selected item:', selectedItem);
                        console.log('Selected option:', selectedOption);
                        console.log('Dataset:', selectedOption.dataset);
                        
                        if (selectedOption.dataset.options) {
                            const options = JSON.parse(selectedOption.dataset.options);
                            console.log('Parsed options:', options);
                            
                            if (options && options.length > 0) {
                                console.log('Showing options dropdown');
                                optionLabel.classList.remove('hidden');
                                optionDropdown.classList.remove('hidden');
                                optionDropdown.disabled = false;

                                optionDropdown.innerHTML = '';
                                const defaultOption = document.createElement('option');
                                defaultOption.value = '';
                                defaultOption.textContent = 'Select option';
                                defaultOption.disabled = true;
                                defaultOption.selected = true;
                                optionDropdown.appendChild(defaultOption);

                                options.forEach(option => {
                                    const optionElement = document.createElement('option');
                                    optionElement.value = option;
                                    optionElement.textContent = option;
                                    optionDropdown.appendChild(optionElement);
                                });

                                // Hide quantity input when showing options
                                if (quantityInput) {
                                    quantityInput.style.display = 'none';
                                    quantityInput.removeAttribute('required');
                                    quantityInput.value = '';
                                }
                            } else {
                                console.log('No options available, showing quantity input');
                                optionLabel.classList.add('hidden');
                                optionDropdown.classList.add('hidden');
                                optionDropdown.disabled = true;
                                // Show quantity input if no options
                                if (quantityInput) {
                                    quantityInput.style.display = 'block';
                                    quantityInput.setAttribute('required', '');
                                }
                            }
                        } else {
                            console.log('No options in dataset');
                        }
                    } else {
                        console.log('Option label or dropdown not found');
                    }
                    checkItemSelection();
                } else if (e.target.classList.contains('option-dropdown')) {
                    const itemIndex = e.target.id.replace('option', '');
                    const selectedOption = e.target.options[e.target.selectedIndex];
                    const quantityInput = e.target.parentElement.querySelector('input[type="number"]');
                    
                    if (quantityInput) {
                        if (selectedOption.value) {
                            // Show quantity input after option is selected
                            quantityInput.style.display = 'block';
                            quantityInput.setAttribute('required', '');
                        } else {
                            quantityInput.style.display = 'none';
                            quantityInput.removeAttribute('required');
                            quantityInput.value = '';
                        }
                    }
                    checkItemSelection();
                }
            });

            // Add event listener for quantity changes
            document.addEventListener('input', function(e) {
                if (e.target.type === 'number') {
                    checkItemSelection();
                }
            });
        }

        // Load dropdown data from JSON
        function loadDropDown() {
            const dataUrl = 'data.json'; 

            fetch(dataUrl)
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Network response was not ok');
                    }
                    return response.json();
                })
                .then(data => {
                    if (!Array.isArray(data)) {
                        throw new Error('Invalid data format');
                    }
                    
                    // Clear existing options except the first one
                    dropdown = document.getElementById('item0');
                    if (!dropdown) {
                        console.error('Item dropdown not found');
                        return;
                    }
                    
                    dropdown.innerHTML = '';
                    
                    // Add default option
                    const defaultOption = document.createElement('option');
                    defaultOption.value = '';
                    defaultOption.textContent = 'Select board';
                    defaultOption.disabled = true;
                    defaultOption.selected = true;
                    dropdown.appendChild(defaultOption);
                    
                    // Add other options
                    data.forEach(item => {
                        const option = document.createElement('option');
                        option.value = item.name;
                        option.textContent = item.name;
                        // Store all item data in dataset
                        option.dataset.price = item.price;
                        option.dataset.size = item.size;
                        option.dataset.options = JSON.stringify(item.options || []);
                        option.dataset.description = item.description || '';
                        dropdown.appendChild(option);
                    });

                    // Initial check for item selection
                    checkItemSelection();
                })
                .catch(error => {
                    console.error('Error loading items data:', error);
                    const dropdown = document.getElementById('item0');
                    if (dropdown) {
                        dropdown.innerHTML = '<option value="" disabled selected>Error loading items</option>';
                    }
                    alert('Error loading items. Please refresh the page or try again later.');
                });
        }

        // Add a new item row
        function addItem() {
            const itemsDiv = document.getElementById('items');
            const newItem = document.createElement('div');
            newItem.classList.add('item');

            // Clone the original dropdown with all its options
            const newDropdown = dropdown.cloneNode(true);
            newDropdown.id = `item${itemCount}`;
            newDropdown.name = `items[${itemCount}][description]`;
            newDropdown.selectedIndex = 0; // Reset to default option

            const newSizeLabel = document.createElement('label');
            newSizeLabel.htmlFor = `size${itemCount}`;
            newSizeLabel.textContent = 'Size:';
            newSizeLabel.classList.add('size-label', 'hidden');

            const newSizeDropdown = document.createElement('select');
            newSizeDropdown.id = `size${itemCount}`;
            newSizeDropdown.name = `items[${itemCount}][size]`;
            newSizeDropdown.classList.add('size-dropdown', 'hidden');
            newSizeDropdown.disabled = true;

            const newOptionLabel = document.createElement('label');
            newOptionLabel.htmlFor = `option${itemCount}`;
            newOptionLabel.textContent = 'Options:';
            newOptionLabel.classList.add('option-label', 'hidden');

            const newOptionDropdown = document.createElement('select');
            newOptionDropdown.id = `option${itemCount}`;
            newOptionDropdown.name = `items[${itemCount}][option]`;
            newOptionDropdown.classList.add('option-dropdown', 'hidden');
            newOptionDropdown.disabled = true;

            const newDescription = document.createElement('div');
            newDescription.id = `description${itemCount}`;
            newDescription.classList.add('description-container');
            newDescription.innerHTML = `
                <label>Description:</label>
                <span class="item-description"></span>
            `;

            newItem.innerHTML = `
                <label for="${newDropdown.id}">Select an item:</label>
                ${newDropdown.outerHTML}
                ${newSizeLabel.outerHTML}
                ${newSizeDropdown.outerHTML}
                ${newOptionLabel.outerHTML}
                ${newOptionDropdown.outerHTML}
                <input type="number" name="items[${itemCount}][quantity]" placeholder="Quantity" style="display: none;" inputmode="numeric" pattern="[0-9]*">
                ${newDescription.outerHTML}
                <label id="price${itemCount}" style="display: none;">Price: R0.00</label>
            `;

            itemsDiv.appendChild(newItem);
            itemCount++;
        }

        // Customer class
        class Customer {
            constructor(name, address, email, phone) {
                this.name = name;
                this.address = address;
                this.email = email;
                this.phone = phone;
            }
        }

        // Format currency for PDF
        function formatCurrency(amount) {
            return new Intl.NumberFormat('en-ZA', {
                style: 'currency',
                currency: 'ZAR'
            }).format(amount);
        }

        // Generate PDF using jsPDF
        function generatePDF(customer, items) {
            // Create new jsPDF instance
            const { jsPDF } = window.jspdf;
            const doc = new jsPDF({
                margins: { top: 25, bottom: 25, left: 25, right: 25 }
            });
            
            // Define margin spaces
            const leftMargin = 25;  
            const topMargin = 25;   
            const rightMargin = 185;
            
            if (logoLoaded) {
                const logoWidth = 72; 
                const logoAspectRatio = companyLogo.height / companyLogo.width;
                const logoHeight = logoWidth * logoAspectRatio;
                
                doc.addImage(companyLogo, 'PNG', leftMargin - 10, topMargin, logoWidth, Math.min(logoHeight, 52)); // Height cap increased proportionally
            }
            
            doc.setFontSize(8);
            doc.setFont(undefined, 'normal');
            doc.text('Ukuza Kwenkosi Enterprises trading as Ukuza Kivenkosi Enterprises', rightMargin, topMargin + 15, { align: 'right' });
            doc.text('Reg No 2012/750142/07 TAX No. 9278518254', rightMargin, topMargin + 20, { align: 'right' });
            doc.text('E2144 Osizeni, Newcastle, KiaZulu-Natal, 2952', rightMargin, topMargin + 25, { align: 'right' });
            
            let customerInfoTopMargin = 55;
            doc.setFontSize(10);
            const quoteNo = Math.floor(Math.random() * 1000).toString().padStart(3, '0');
            doc.text(`Quote #: ${quoteNo}`, rightMargin, topMargin + customerInfoTopMargin, { align: 'right' });
            doc.text(`Date: ${new Date().toLocaleDateString()}`, rightMargin, topMargin + customerInfoTopMargin + 5, { align: 'right' });
            doc.text(`Name: ${customer.name}`, leftMargin, topMargin + customerInfoTopMargin);
            doc.text(`Address: ${customer.address}`, leftMargin, topMargin + customerInfoTopMargin + 5);
            doc.text(`Email: ${customer.email}`, leftMargin, topMargin + customerInfoTopMargin + 10);
            doc.text(`Phone: ${customer.phone}`, leftMargin, topMargin + customerInfoTopMargin + 15);
            
            // Add items table - adjusted for new margins
            const tableColumn = ["Description", "Price", "Quantity", "Total (incl. VAT)"];
            const tableRows = [];
            
            let totalAmount = 0;
            
            items.forEach(item => {
                const total = item.price * item.quantity * 1.15; // Add 15% VAT
                totalAmount += total;
                
                // Split description into two lines if it's too long
                const description = item.description;
                const maxLength = 40; // Maximum characters per line
                let formattedDescription = description;
                
                if (description.length > maxLength) {
                    // Find a good breaking point (space or dash)
                    let breakPoint = description.lastIndexOf(' ', maxLength);
                    if (breakPoint === -1) {
                        breakPoint = description.lastIndexOf('-', maxLength);
                    }
                    if (breakPoint === -1) {
                        breakPoint = maxLength;
                    }
                    
                    formattedDescription = description.substring(0, breakPoint) + '\n' + 
                                        description.substring(breakPoint + 1);
                }
                
                tableRows.push([
                    formattedDescription,
                    formatCurrency(item.price),
                    item.quantity,
                    formatCurrency(total)
                ]);
            });
            
            // Generate the table - adjusted for new margins
            doc.autoTable({
                head: [tableColumn],
                body: tableRows,
                startY: topMargin + 80,
                margin: { left: leftMargin, right: leftMargin },
                theme: 'grid',
                headStyles: {
                    fillColor: logoPrimaryColor, // Use darker red for header
                    textColor: 255,
                    halign: 'center' // Center align all header cells
                },
                alternateRowStyles: {
                    fillColor: logoSecondaryColor // Use extracted secondary color from logo
                },
                foot: [['', '', { content: 'Total:', styles: { halign: 'center' } }, { content: formatCurrency(totalAmount), styles: { halign: 'center' } }]],
                footStyles: {
                    fillColor: footerColor,
                    textColor: [0, 0, 0],
                    fontStyle: 'bold'
                },
                columnStyles: {
                    0: { cellWidth: 'auto' }, // Description column
                    1: { cellWidth: 30, halign: 'center' }, // Price column
                    2: { cellWidth: 20, halign: 'center' }, // Quantity column
                    3: { cellWidth: 40, halign: 'center' } // Total column
                }
            });
            
            // Get final position after table
            const finalY = doc.lastAutoTable.finalY || (topMargin + 115);
            
            // Add banking details before terms and conditions
            doc.text('Capitec Business', leftMargin, finalY + 37);
            doc.text('Account No: 1052338658', leftMargin, finalY + 44);
            doc.text('Branch Code: 450105', leftMargin, finalY + 51);
            doc.text('Swift code: CABLZAJJ', leftMargin, finalY + 58);
            
            // Add terms and conditions - adjusted to appear after banking details
            doc.setFontSize(10);
            doc.setFont(undefined, 'bold');
            doc.text('Terms & Conditions:', leftMargin, finalY + 75);
            doc.setFont(undefined, 'normal');
            doc.setFontSize(8);
            doc.text('1. This quote is valid for 30 days from the date of issue.', leftMargin, finalY + 85);
            doc.text('2. Payment terms: 50% deposit required to confirm order.', leftMargin, finalY + 92);
            doc.text('3. Delivery time: 2-3 weeks after confirmation of order.', leftMargin, finalY + 99);
            
            // Return the PDF as blob
            return doc.output('blob');
        }

        // Handle form submission
        document.getElementById('invoiceForm').addEventListener('submit', async (event) => {
            event.preventDefault();

            // Create overlay with loader
            const overlay = document.createElement('div');
            overlay.className = 'overlay';
            
            const loader = document.createElement('div');
            loader.className = 'loader';
            
            const text = document.createElement('div');
            text.className = 'overlay-text';
            text.textContent = 'Generating PDF...';
            
            overlay.appendChild(loader);
            overlay.appendChild(text);
            document.body.appendChild(overlay);

            const formData = new FormData(event.target);

            // Create a Customer object
            const customer = new Customer(
                formData.get('customerName'),
                formData.get('address'),
                formData.get('emailAddress'),
                formData.get('phone')
            );

            // Collect items
            const items = [];
            for (let i = 0; i < itemCount; i++) {
                const description = formData.get(`items[${i}][description]`);
                const quantity = formData.get(`items[${i}][quantity]`);
                const selectedOption = document.getElementById(`item${i}`).options[document.getElementById(`item${i}`).selectedIndex];
                
                if (description && quantity) {
                    items.push({
                        description: `${description} - ${selectedOption.dataset.size}${selectedOption.dataset.description ? ` (${selectedOption.dataset.description})` : ''}`,
                        quantity: parseFloat(quantity),
                        price: parseFloat(selectedOption.dataset.price)
                    });
                }
            }

            try {
                if (!logoLoaded) {
                    console.warn("Logo not loaded yet, attempting to reload...");
                    preloadLogo();
                    await new Promise(resolve => setTimeout(resolve, 500));
                }
                
                const pdfBlob = generatePDF(customer, items);
                const pdfUrl = URL.createObjectURL(pdfBlob);

                // Open PDF in new tab instead of downloading
                window.open(pdfUrl, '_blank');

                // Clean up the URL object after a delay
                setTimeout(() => {
                    URL.revokeObjectURL(pdfUrl);
                }, 3000);
            } catch (error) {
                overlay.remove();
                console.error('Error generating PDF:', error);
                alert('Error generating PDF. Please try again.');
            }
        });
    </script>
</body>
</html>